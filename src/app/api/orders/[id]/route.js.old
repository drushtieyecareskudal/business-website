import { NextResponse } from "next/server";
import dbConnect from "@/utils/dbconnect";
import Order from "@/models/Order";
import Product from "@/models/Product";
import { cookies } from "next/headers";
import jwt from "jsonwebtoken";

// Helper function to get user ID from token
const getUserId = async () => {
  try {
    const cookieStore = cookies();
    const token = cookieStore.get("token")?.value;

    if (!token) {
      return null;
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "secret");
    return decoded.id;
  } catch {
    return null;
  }
};

export async function GET(request, { params }) {
  try {
    console.log(`GET /api/orders/${params.id} - Fetching order details`);
    const userId = await getUserId();
    console.log("User ID from token:", userId);

    if (!userId) {
      console.log("Authentication failed - no user ID from token");
      return NextResponse.json(
        { success: false, message: "Unauthorized" },
        { status: 401 }
      );
    }

    await dbConnect();
    const id = params.id;
    console.log("Looking for order with ID:", id);

    const order = await Order.findById(id).populate({
      path: "items.product",
      model: Product,
      select: "name slug images price discountedPrice",
    });

    console.log("Order found:", order ? "Yes" : "No");

    // Verify that the order belongs to the logged-in user
    if (!order) {
      console.log("Order not found");
      return NextResponse.json(
        { success: false, message: "Order not found" },
        { status: 404 }
      );
    }

    console.log("Order user ID:", order.user.toString());
    console.log("Current user ID:", userId);

    if (order.user.toString() !== userId) {
      console.log("Order belongs to a different user");
      return NextResponse.json(
        { success: false, message: "Order not found" },
        { status: 404 }
      );
    }

    return NextResponse.json({ success: true, order });
  } catch (error) {
    console.error("Error fetching order:", error);
    return new NextResponse(
      JSON.stringify({ message: "Error fetching order", error: error.message }),
      { status: 500 }
    );
  }
}
